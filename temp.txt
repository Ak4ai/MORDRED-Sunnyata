document.addEventListener('DOMContentLoaded', (event) => {
  const wrapper = document.getElementById('tabuleiro-wrapper');
  
  if (!wrapper) {
    console.error('Elemento "tabuleiro-wrapper" não encontrado.');
    return;
  }

  let isDragging = false;
  let startX, startY, scrollLeft, scrollTop;
  const zoomLevel = parseFloat(wrapper.style.zoom) || 1;  // Obtém o nível de zoom, se existir

  // Início do arraste
  wrapper.addEventListener('mousedown', (e) => {
    console.log('mousedown:', e); // Verificando o clique inicial

    isDragging = true;
    wrapper.style.cursor = 'grabbing';

    // Ajuste do início do movimento para considerar o zoom e o deslocamento correto
    const rect = wrapper.getBoundingClientRect();
    startX = (e.clientX - rect.left) / zoomLevel; // Posição inicial considerando o zoom
    startY = (e.clientY - rect.top) / zoomLevel; // Posição inicial considerando o zoom

    scrollLeft = wrapper.scrollLeft;
    scrollTop = wrapper.scrollTop;

    console.log('Iniciado o arraste');
  });

  // Movimento durante o arraste
  wrapper.addEventListener('mousemove', (e) => {
    if (!isDragging) return;

    console.log('mousemove:', e); // Verificando movimento do mouse

    const rect = wrapper.getBoundingClientRect();
    
    // Cálculo da posição levando em conta o zoom e a posição atual
    const x = (e.clientX - rect.left) / zoomLevel;
    const y = (e.clientY - rect.top) / zoomLevel;

    // Calcular a diferença do movimento
    const moveX = x - startX;
    const moveY = y - startY;

    // Atualiza o scroll com a diferença do movimento
    wrapper.scrollLeft = scrollLeft - moveX;
    wrapper.scrollTop = scrollTop - moveY;

    console.log('Movendo...', 'scrollLeft:', wrapper.scrollLeft, 'scrollTop:', wrapper.scrollTop);
  });

  // Fim do arraste
  wrapper.addEventListener('mouseup', () => {
    if (!isDragging) return;

    console.log('mouseup: Terminado o arraste');

    isDragging = false;
    wrapper.style.cursor = 'grab';
  });

  // Caso o mouse saia da área do wrapper
  wrapper.addEventListener('mouseleave', () => {
    if (isDragging) {
      console.log('mouseleave: Arraste cancelado');
    }

    isDragging = false;
    wrapper.style.cursor = 'grab';
  });
});
